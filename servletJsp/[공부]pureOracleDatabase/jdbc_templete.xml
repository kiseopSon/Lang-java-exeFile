<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<templates>
<template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_insert_update_delete">
	public int insert_update_delete(${argType} vo) {
		// TODO Auto-generated method stub
		int res = 0;
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		
		String sql ="";
		
		try {
			//1.Connection획득
			conn = DBService.getInstance().getConnection();
			//2.명령처리객체 획득
			pstmt = conn.prepareStatement(sql);
			
			//3.pstmt parameter 채우기
			
			
			//4.DB로 전송(res:처리된행수)
			res = pstmt.executeUpdate();
			
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		} finally{
			
			try {
				if(pstmt!=null) pstmt.close();
				if(conn!=null) conn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return res;
	}
	</template>
	<template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_select_list">
		public List<${argType}>;  selectList(){

		List<${argType}>; list = new ArrayList<${argType}>;();
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet  rs = null;
		String  sql = "";
		
		try {
			//1.Connection얻어온다
			conn = DBService.getInstance().getConnection();
			//2.명령처리객체정보를 얻어오기
			pstmt = conn.prepareStatement(sql);
			
			//3.결과행 처리객체 얻어오기
			rs = pstmt.executeQuery();
			
			while(rs.next()){
				${argType} vo = new ${argType}();
				//현재레코드값=>;Vo저장

								
				//ArrayList추가
				list.add(vo);
			}
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		} finally {
			
			try {
				if(rs!=null) rs.close();
				if(pstmt!=null)pstmt.close();
				if(conn!=null)conn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		return list;
	}
	</template>
	<template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_select_one">
		public ${argType}  selectOne(int idx){

		${argType} vo = null;

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet  rs = null;
		String  sql = "";
		
		try {
			//1.Connection얻어온다
			conn = DBService.getInstance().getConnection();
			//2.명령처리객체정보를 얻어오기
			pstmt = conn.prepareStatement(sql);
            
            //3.pstmt parameter 설정

			//4.결과행 처리객체 얻어오기
			rs = pstmt.executeQuery();
			
			if(rs.next()){
				vo = new ${argType}();
				//현재레코드값=>;Vo저장
				
			}
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		} finally {
			
			try {
				if(rs!=null) rs.close();
				if(pstmt!=null)pstmt.close();
				if(conn!=null)conn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		return vo;
	}
	</template>
	<template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_singleton">    // single-ton pattern: 
	// 객체1개만생성해서 지속적으로 서비스하자
	static ${primary_type_name} single=null;
	public static ${primary_type_name} getInstance(){
		//생성되지 않았으면 생성
		if(single==null)
			single = new ${primary_type_name}();
		//생성된 객체정보를 반환
		return single;
	}
	</template>
</templates>